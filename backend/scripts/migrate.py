#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö ETL —Å–∏—Å—Ç–µ–º—ã
"""

import os
import sys
import subprocess
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
sys.path.append(str(Path(__file__).parent.parent))

from app.core.config import get_settings

def run_migration(db_type: str, command: str = "upgrade head"):
    """–ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –ë–î"""
    settings = get_settings()
    
    if db_type == "metadata":
        db_url = settings.metadata_postgres_dsn
        env = os.environ.copy()
        env["ALEMBIC_DATABASE_URL"] = db_url
        
        print(f"üîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –¥–ª—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –ë–î...")
        print(f"üì° URL: {db_url}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º alembic
        result = subprocess.run(
            ["alembic", command],
            env=env,
            cwd=Path(__file__).parent.parent,
            capture_output=True,
            text=True
        )
        
        if result.returncode == 0:
            print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            if result.stdout:
                print(result.stdout)
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–π –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö:")
            print(result.stderr)
            return False
            
    elif db_type == "staging":
        db_url = settings.staging_postgres_dsn
        env = os.environ.copy()
        env["ALEMBIC_DATABASE_URL"] = db_url
        
        print(f"üîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –¥–ª—è —Ä–∞–±–æ—á–µ–π –ë–î...")
        print(f"üì° URL: {db_url}")
        
        # –î–ª—è staging –ë–î –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        staging_env = env.copy()
        staging_env["ALEMBIC_CONFIG"] = str(Path(__file__).parent.parent / "alembic_staging.ini")
        
        result = subprocess.run(
            ["alembic", "-c", "alembic_staging.ini", command],
            env=staging_env,
            cwd=Path(__file__).parent.parent,
            capture_output=True,
            text=True
        )
        
        if result.returncode == 0:
            print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—á–µ–π –ë–î –ø—Ä–∏–º–µ–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            if result.stdout:
                print(result.stdout)
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–π —Ä–∞–±–æ—á–µ–π –ë–î:")
            print(result.stderr)
            return False
            
    elif db_type == "target":
        # –î–ª—è ClickHouse –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ –Ω—É–∂–Ω—ã, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –∫–æ–ª–æ–Ω–æ—á–Ω–∞—è –ë–î
        print("‚ÑπÔ∏è  ClickHouse –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –º–∏–≥—Ä–∞—Ü–∏–π (–∫–æ–ª–æ–Ω–æ—á–Ω–∞—è –ë–î)")
        return True
        
    else:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ë–î: {db_type}")
        return False
        
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python scripts/migrate.py <db_type> [command]")
        print("")
        print("–¢–∏–ø—ã –ë–î:")
        print("  metadata  - –ë–î –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö (–ø–∞–π–ø–ª–∞–π–Ω—ã, –∏—Å—Ç–æ—á–Ω–∏–∫–∏)")
        print("  staging   - –†–∞–±–æ—á–∞—è –ë–î (–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ)")
        print("  target    - –¶–µ–ª–µ–≤–∞—è –ë–î (ClickHouse)")
        print("  all       - –í—Å–µ –ë–î")
        print("")
        print("–ö–æ–º–∞–Ω–¥—ã:")
        print("  upgrade head  - –ü—Ä–∏–º–µ–Ω–∏—Ç—å –≤—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)")
        print("  downgrade -1  - –û—Ç–∫–∞—Ç–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –º–∏–≥—Ä–∞—Ü–∏—é")
        print("  current       - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é")
        print("  history       - –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –º–∏–≥—Ä–∞—Ü–∏–π")
        sys.exit(1)
    
    db_type = sys.argv[1]
    command = sys.argv[2] if len(sys.argv) > 2 else "upgrade head"
    
    if db_type == "all":
        success = True
        for db in ["metadata", "staging", "target"]:
            print(f"\n{'='*50}")
            print(f"–†–∞–±–æ—Ç–∞ —Å –ë–î: {db}")
            print(f"{'='*50}")
            if not run_migration(db, command):
                success = False
                break
        
        if success:
            print(f"\n‚úÖ –í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        else:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–π!")
            sys.exit(1)
    else:
        if not run_migration(db_type, command):
            sys.exit(1)

if __name__ == "__main__":
    main()
