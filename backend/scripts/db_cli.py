#!/usr/bin/env python3
"""
CLI —É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö ETL —Å–∏—Å—Ç–µ–º—ã
"""

import sys
import argparse
from pathlib import Path
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
sys.path.append(str(Path(__file__).parent.parent))

from app.connectors.database_manager import db_manager


def test_connections():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö...")
    results = db_manager.test_connections()
    
    for db_name, status in results.items():
        if status:
            print(f"‚úÖ {db_name.upper()} –ë–î: –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
        else:
            print(f"‚ùå {db_name.upper()} –ë–î: –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
    
    return all(results.values())


def show_stats():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ë–î"""
    print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö:")
    print("=" * 50)
    
    stats = db_manager.get_database_stats()
    
    for db_name, db_stats in stats.items():
        print(f"\nüóÑÔ∏è  {db_name.upper()} –ë–î:")
        if "error" in db_stats:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {db_stats['error']}")
        else:
            for key, value in db_stats.items():
                print(f"   ‚Ä¢ {key}: {value}")


def cleanup_old_data():
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —É–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π
    results = db_manager.cleanup_old_data(days=30)
    
    print("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—á–∏—Å—Ç–∫–∏:")
    for key, value in results.items():
        if "error" in key:
            print(f"   ‚ùå {key}: {value}")
        else:
            print(f"   ‚úÖ {key}: {value}")


def create_backup():
    """–°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞"""
    backup_dir = Path("backups")
    backup_dir.mkdir(exist_ok=True)
    
    print(f"üíæ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {backup_dir.absolute()}")
    
    results = db_manager.backup_databases(str(backup_dir))
    
    print("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—ç–∫–∞–ø–∞:")
    for key, value in results.items():
        if "error" in key:
            print(f"   ‚ùå {key}: {value}")
        else:
            print(f"   ‚úÖ {key}: {value}")


def show_tables():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü"""
    print("üìã –°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–∞—Ö –¥–∞–Ω–Ω—ã—Ö:")
    print("=" * 50)
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ë–î
    print("\nüóÑÔ∏è  –ú–ï–¢–ê–î–ê–ù–ù–´–ï –ë–î:")
    try:
        with db_manager.get_metadata_session() as session:
            tables = session.execute("""
                SELECT table_name, table_type 
                FROM information_schema.tables 
                WHERE table_schema = 'public'
                ORDER BY table_name
            """)
            for table in tables:
                print(f"   ‚Ä¢ {table[0]} ({table[1]})")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –†–∞–±–æ—á–∞—è –ë–î
    print("\nüóÑÔ∏è  –†–ê–ë–û–ß–ê–Ø –ë–î:")
    try:
        with db_manager.get_staging_session() as session:
            tables = session.execute("""
                SELECT table_name, table_type 
                FROM information_schema.tables 
                WHERE table_schema = 'public'
                ORDER BY table_name
            """)
            for table in tables:
                print(f"   ‚Ä¢ {table[0]} ({table[1]})")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # ClickHouse
    print("\nüóÑÔ∏è  CLICKHOUSE:")
    try:
        import subprocess
        result = subprocess.run([
            "curl", "-s", "-u", "default:clickhouse_password",
            "http://localhost:8123/?query=SELECT%20name%2C%20engine%20FROM%20system.tables%20WHERE%20database%20%3D%20%27etl_target%27%20ORDER%20BY%20name"
        ], capture_output=True, text=True)
        
        if result.returncode == 0:
            lines = result.stdout.strip().split('\n')
            for line in lines:
                if line.strip():
                    parts = line.strip().split('\t')
                    if len(parts) >= 2:
                        print(f"   ‚Ä¢ {parts[0]} ({parts[1]})")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {result.stderr}")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")


def show_recent_runs():
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø—É—Å–∫–∏ –ø–∞–π–ø–ª–∞–π–Ω–æ–≤"""
    print("üîÑ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø—É—Å–∫–∏ –ø–∞–π–ø–ª–∞–π–Ω–æ–≤:")
    print("=" * 50)
    
    try:
        with db_manager.get_metadata_session() as session:
            runs = session.execute("""
                SELECT 
                    p.name as pipeline_name,
                    pr.status,
                    pr.started_at,
                    pr.finished_at,
                    pr.duration_seconds,
                    pr.records_processed,
                    pr.error_message
                FROM pipelines p
                JOIN pipeline_runs pr ON p.id = pr.pipeline_id
                ORDER BY pr.created_at DESC
                LIMIT 10
            """)
            
            for run in runs:
                print(f"\nüìã –ü–∞–π–ø–ª–∞–π–Ω: {run[0]}")
                print(f"   –°—Ç–∞—Ç—É—Å: {run[1]}")
                print(f"   –ù–∞—á–∞–ª–æ: {run[2]}")
                print(f"   –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ: {run[3]}")
                print(f"   –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {run[4]} —Å–µ–∫")
                print(f"   –ó–∞–ø–∏—Å–µ–π: {run[5]}")
                if run[6]:
                    print(f"   –û—à–∏–±–∫–∞: {run[6][:100]}...")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


def show_data_quality():
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö"""
    print("üìä –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö:")
    print("=" * 50)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
        metrics = db_manager.clickhouse_client.query("""
            SELECT 
                table_name,
                metric_name,
                metric_value,
                is_passed,
                created_at
            FROM data_quality_metrics
            WHERE created_at >= now() - INTERVAL 7 DAY
            ORDER BY created_at DESC
            LIMIT 20
        """)
        
        for metric in metrics.result_rows:
            status = "‚úÖ" if metric[3] else "‚ùå"
            print(f"{status} {metric[0]}.{metric[1]}: {metric[2]} ({metric[4]})")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description="CLI —É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ë–î ETL —Å–∏—Å—Ç–µ–º—ã")
    
    subparsers = parser.add_subparsers(dest="command", help="–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã")
    
    # –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
    subparsers.add_parser("test", help="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
    
    # –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    subparsers.add_parser("stats", help="–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ë–î")
    
    # –ö–æ–º–∞–Ω–¥–∞ –æ—á–∏—Å—Ç–∫–∏
    cleanup_parser = subparsers.add_parser("cleanup", help="–û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ")
    cleanup_parser.add_argument("--days", type=int, default=30, help="–£–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ä—à–µ N –¥–Ω–µ–π")
    
    # –ö–æ–º–∞–Ω–¥–∞ –±—ç–∫–∞–ø–∞
    subparsers.add_parser("backup", help="–°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø –ë–î")
    
    # –ö–æ–º–∞–Ω–¥–∞ —Å–ø–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü
    subparsers.add_parser("tables", help="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü")
    
    # –ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–æ–≤ –ø–∞–π–ø–ª–∞–π–Ω–æ–≤
    subparsers.add_parser("runs", help="–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø—É—Å–∫–∏ –ø–∞–π–ø–ª–∞–π–Ω–æ–≤")
    
    # –ö–æ–º–∞–Ω–¥–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
    subparsers.add_parser("quality", help="–ü–æ–∫–∞–∑–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö")
    
    # –ö–æ–º–∞–Ω–¥–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    subparsers.add_parser("init", help="–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –ë–î")
    
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        return
    
    try:
        if args.command == "test":
            success = test_connections()
            sys.exit(0 if success else 1)
            
        elif args.command == "stats":
            show_stats()
            
        elif args.command == "cleanup":
            if args.days:
                results = db_manager.cleanup_old_data(days=args.days)
                print("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—á–∏—Å—Ç–∫–∏:")
                for key, value in results.items():
                    print(f"   {key}: {value}")
            else:
                cleanup_old_data()
                
        elif args.command == "backup":
            create_backup()
            
        elif args.command == "tables":
            show_tables()
            
        elif args.command == "runs":
            show_recent_runs()
            
        elif args.command == "quality":
            show_data_quality()
            
        elif args.command == "init":
            print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            if not test_connections():
                print("‚ùå –ù–µ –≤—Å–µ –ë–î –¥–æ—Å—Ç—É–ø–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.")
                sys.exit(1)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            show_stats()
            
            print("\n‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
