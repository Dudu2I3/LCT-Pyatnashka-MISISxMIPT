#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ClickHouse (—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –¥–ª—è —Ü–µ–ª–µ–≤–æ–π –ë–î)
"""

import sys
import clickhouse_connect
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
sys.path.append(str(Path(__file__).parent.parent))

from app.core.config import get_settings

def create_clickhouse_tables():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ ClickHouse"""
    settings = get_settings()
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ClickHouse
    client = clickhouse_connect.get_client(
        host=settings.target_clickhouse_host,
        port=settings.target_clickhouse_port,
        username=settings.target_clickhouse_user,
        password=settings.target_clickhouse_password,
        database=settings.target_clickhouse_database,
        secure=False,
        verify=False
    )
    
    print(f"üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ClickHouse: {settings.target_clickhouse_host}:{settings.target_clickhouse_port}")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –º–µ—Ç—Ä–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
    create_data_quality_metrics = """
    CREATE TABLE IF NOT EXISTS data_quality_metrics (
        id UInt64,
        created_at DateTime64(3),
        updated_at Nullable(DateTime64(3)),
        table_name String,
        column_name Nullable(String),
        metric_name String,
        metric_value Float64,
        threshold_min Nullable(Float64),
        threshold_max Nullable(Float64),
        is_passed UInt8,
        pipeline_run_id Nullable(UInt64)
    ) ENGINE = MergeTree()
    ORDER BY (table_name, metric_name, created_at)
    PARTITION BY toYYYYMM(created_at)
    """
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –±–∏–∑–Ω–µ—Å –º–µ—Ç—Ä–∏–∫
    create_business_metrics = """
    CREATE TABLE IF NOT EXISTS business_metrics (
        id UInt64,
        created_at DateTime64(3),
        updated_at Nullable(DateTime64(3)),
        metric_category String,
        metric_name String,
        metric_value Float64,
        metric_unit Nullable(String),
        dimension_values String,
        calculation_date DateTime64(3),
        pipeline_run_id Nullable(UInt64)
    ) ENGINE = MergeTree()
    ORDER BY (metric_category, metric_name, calculation_date)
    PARTITION BY toYYYYMM(calculation_date)
    """
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –ª–∏–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
    create_data_lineage = """
    CREATE TABLE IF NOT EXISTS data_lineage (
        id UInt64,
        created_at DateTime64(3),
        updated_at Nullable(DateTime64(3)),
        source_table String,
        source_column Nullable(String),
        target_table String,
        target_column Nullable(String),
        transformation_type String,
        transformation_logic Nullable(String),
        pipeline_run_id UInt64,
        record_count Nullable(UInt64)
    ) ENGINE = MergeTree()
    ORDER BY (source_table, target_table, pipeline_run_id)
    PARTITION BY toYYYYMM(created_at)
    """
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞ –¥–∞–Ω–Ω—ã—Ö
    create_data_catalog = """
    CREATE TABLE IF NOT EXISTS data_catalog (
        id UInt64,
        created_at DateTime64(3),
        updated_at Nullable(DateTime64(3)),
        table_name String,
        schema_name Nullable(String),
        column_name Nullable(String),
        data_type Nullable(String),
        is_nullable Nullable(UInt8),
        default_value Nullable(String),
        description Nullable(String),
        business_meaning Nullable(String),
        owner Nullable(String),
        tags String,
        sensitivity_level Nullable(String),
        last_updated Nullable(DateTime64(3))
    ) ENGINE = MergeTree()
    ORDER BY (table_name, schema_name, column_name)
    """
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –∞—É–¥–∏—Ç –ª–æ–≥–∞
    create_etl_audit_log = """
    CREATE TABLE IF NOT EXISTS etl_audit_log (
        id UInt64,
        created_at DateTime64(3),
        updated_at Nullable(DateTime64(3)),
        operation_type String,
        table_name String,
        operation_details String,
        user_id Nullable(String),
        session_id Nullable(String),
        ip_address Nullable(String),
        user_agent Nullable(String),
        pipeline_run_id Nullable(UInt64)
    ) ENGINE = MergeTree()
    ORDER BY (table_name, operation_type, created_at)
    PARTITION BY toYYYYMM(created_at)
    """
    
    tables = [
        ("data_quality_metrics", create_data_quality_metrics),
        ("business_metrics", create_business_metrics),
        ("data_lineage", create_data_lineage),
        ("data_catalog", create_data_catalog),
        ("etl_audit_log", create_etl_audit_log)
    ]
    
    for table_name, create_sql in tables:
        try:
            print(f"üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã: {table_name}")
            client.command(create_sql)
            print(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ {table_name} —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã {table_name}: {e}")
            return False
    
    print("\n‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã ClickHouse —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        if create_clickhouse_tables():
            print("\nüéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ClickHouse –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        else:
            print("\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ClickHouse!")
            sys.exit(1)
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
